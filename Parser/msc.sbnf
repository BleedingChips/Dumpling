Empty := \s+
Code := @\{[.\n]*?\}@
Id := [a-zA-Z_]+[a-zA-Z_0-9]*
Number := [1-9][0-9]*(.[0-9]+)?
Import := Import(?=([^a-zA-Z_0-9]+)|$)
String := (\".*?[^\\]\")|(\"\")
As := As(?:([^a-zA-Z_0-9]+)|$)
Define := Define(?=([^a-zA-Z_0-9]+)|$)
Material := Material(?=([^a-zA-Z_0-9]+)|$)
Output := Output(?=([^a-zA-Z_0-9]+)|$)
Setting := Setting(?=([^a-zA-Z_0-9]+)|$)

%%%

Empty

%%%

$ := <Statement>

<ID> := Id
    := <ID> '.' Id

<Equation> := Id '=' Id
    := Id '=' String
    := Id '=' Number

<DefineStatement> := '->' Define '[' [ <ID> { ',' <ID> }   ] ']' Code

<OutputStatement> := '->' Output '(' [  Id Id { ',' Id Id }  ] ')' Code

<SettingStatement> := '->' Setting '{' {  (Id '=' Id) | (Define Id String) ';' } '}'

<MaterialStatement> := Material <ID> As Id <DefineStatement> <OutputStatement> <SettingStatement> ';'

<ImportStatement> := Import String As Id ';'

<Statement> := { <ImportStatement> } { <MaterialStatement> }

%%%














